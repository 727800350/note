let os = "linux"
if has('unix')
  if has('mac')
    let os = "mac"
  endif
endif

let env = system("systemd-detect-virt")

set nocompatible
set pastetoggle=<F9> "raw copy, do not use auto indent etc.
set mouse-=a "disable visual mode

"=============================== encoding ===============================
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set encoding=utf-8
"=============================== encoding ===============================

" 设置 vimrc 修改保存后立刻生效,不用在重新打开
" 建议配置完成后将这个关闭,否则配置多了之后会很卡
" autocmd BufWritePost $MYVIMRC source $MYVIMRC

set nu "show number
set cursorline "突出显示当前行
set showmatch "colorscheme evening
set laststatus=2 "always show status line
set showcmd
set ruler

set ic "ignore case
set hlsearch "hightlight search
set incsearch "when searching book, when type /b will automatically find in c search

" syntax
syntax enable
syntax on

filetype plugin on
filetype indent on
augroup filetype
    autocmd! BufRead,BufNewFile BUILD set filetype=blade
augroup end

" indent
set autoread
set autoindent
set smartindent
set shiftwidth=2
set tabstop=2 "for python, tabstop will be overwritten by /usr/share/vim/vim80/ftplugin/python.vim, need to change tabstop in this file to 4 too
set expandtab "2 backspace to replace a tab
set colorcolumn=121

" nobackup
set nobackup
set nowb
set noswapfile
if v:version >= 800
  set noundofile
endif

" go back the previvous cursor location
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" 定义快捷键的前缀,即<Leader>
let mapleader=";"

" 插件开始的位置
call plug#begin('~/.vim/plugged')

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
" 可以快速对齐的插件
Plug 'junegunn/vim-easy-align'

" 用来提供一个导航目录的侧边栏
Plug 'scrooloose/nerdtree'

" 可以使 nerdtree 的 tab 更加友好些
Plug 'jistr/vim-nerdtree-tabs'

" 查看当前代码文件中的变量和函数列表的插件,
" 可以切换和跳转到代码中对应的变量和函数的位置
" 大纲式导航, Go 需要 https://github.com/jstemmer/gotags 支持
Plug 'majutsushi/tagbar'

" 自动补全括号的插件,包括小括号,中括号,以及花括号
Plug 'jiangmiao/auto-pairs'

" Vim状态栏插件,包括显示行号,列号,文件类型,文件名,以及Git状态
Plug 'vim-airline/vim-airline'

" 有道词典在线翻译
Plug 'ianva/vim-youdao-translater'

" 代码自动完成,安装完插件还需要额外配置才可以使用
if os == "linux" && env == "docker"
  Plug 'Valloric/YouCompleteMe'
endif

" 可以在 vim 中使用 tab 补全
"Plug 'vim-scripts/SuperTab'

" 可以在 vim 中自动完成
"Plug 'Shougo/neocomplete.vim'

" 配色方案
" colorscheme neodark
Plug 'KeitaNakamura/neodark.vim'
" colorscheme monokai
Plug 'crusoexia/vim-monokai'
" colorscheme github
Plug 'acarapetis/vim-colors-github'
" colorscheme one
Plug 'rakr/vim-one'

" go 主要插件
Plug 'fatih/vim-go', { 'tag': '*' }
" go 中的代码追踪,输入 gd 就可以自动跳转
Plug 'dgryski/vim-godef'

" markdown 插件
Plug 'iamcco/mathjax-support-for-mkdp'
Plug 'iamcco/markdown-preview.vim'

" 插件结束的位置,插件全部放在此行上面
call plug#end()


"==============================================================================
" 主题配色
"==============================================================================
" 开启24bit的颜色,开启这个颜色会更漂亮一些
set termguicolors
" 配色方案, 可以从上面插件安装中的选择一个使用
colorscheme one " 主题
set background=dark " 主题背景 dark-深色; light-浅色


"==============================================================================
" vim-go 插件
"==============================================================================
let g:go_fmt_command = "goimports" " 格式化将默认的 gofmt 替换
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"

let g:go_version_warning = 0
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_generate_tags = 1

let g:godef_split=2


"==============================================================================
" NERDTree 插件
"==============================================================================
" 打开和关闭NERDTree快捷键
map <F10> :NERDTreeToggle<CR>
" 显示行号
let NERDTreeShowLineNumbers=1
" 打开文件时是否显示目录
let NERDTreeAutoCenter=1
" 是否显示隐藏文件
let NERDTreeShowHidden=0
" 设置宽度
" let NERDTreeWinSize=31
" 忽略一下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
" 打开 vim 文件及显示书签列表
let NERDTreeShowBookmarks=2

" 在终端启动vim时,共享NERDTree
let g:nerdtree_tabs_open_on_console_startup=1


"==============================================================================
"  majutsushi/tagbar 插件
"==============================================================================
" majutsushi/tagbar 插件打开关闭快捷键
nmap <F9> :TagbarToggle<CR>

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }


"==============================================================================
"  其他插件配置
"==============================================================================
" markdwon 的快捷键
map <silent> <F5> <Plug>MarkdownPreview
map <silent> <F6> <Plug>StopMarkdownPreview


" ======= auto match ===================
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {}<ESC>i
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
" :inoremap < <><ESC>i
" :inoremap > <C-R>=ClosePair('>')<CR>
:inoremap " ""<ESC>i
:inoremap ' ''<ESC>i
:inoremap ` ``<ESC>i
" :inoremap $ $$<ESC>i
function ClosePair(char)
  if getline('.')[col('.') - 1] == a:char
    return "\<Right>"
  else
    return a:char
  endif
endf
" ======= auto match ===================


"==============================comments===================================
" F11 Comment F12 uncomment
map <F11> :call Comment()<CR>
imap <F11> <ESC>:call Comment()<CR>
vmap <F11> <ESC>:call Comment()<CR>
map <F12> :call Uncomment()<CR>
imap <F12> <ESC>:call Uncomment()<CR>
vmap <F12> <ESC>:call Uncomment()<CR>

" Comments range (handles multiple file types)
function! Comment() range
  if &filetype == "c" || &filetype == "h" || &filetype == "java" || &filetype == "cs" || &filetype == "cpp" || &filetype == "hpp" || &filetype == "php" || &filetype == "go"
    let commentString = "// "
  elseif &filetype == "vim"
    let commentString = '" '
  elseif &filetype == "scheme"
    let commentString = ';; '
  elseif &filetype == "tex" || &filetype == "bib" || &filetype == "mp"
    let commentString = "%% "
  elseif &filetype == "sql"
    let commentString = "-- "
  elseif &filetype == "fortran"
    let commentString = "!! "
  else
    let commentString = "## "
  endif
  execute ":" . a:firstline . "," . a:lastline . 's,^,' . commentString . ','
endfunction

" Uncomments range (handles multiple file types)
function! Uncomment() range
  if &filetype == "c" || &filetype == "h" || &filetype == "java" || &filetype == "cs" || &filetype == "cpp" || &filetype == "hpp" || &filetype == "php" || &filetype == "go"
    let commentString = "// "
  elseif &filetype == "vim"
    let commentString = '" '
  elseif &filetype == "scheme"
    let commentString = ';; '
  elseif &filetype == "tex" || &filetype == "bib" || &filetype == "mp"
    let commentString = "%% "
  elseif &filetype == "sql"
    let commentString = "-- "
  elseif &filetype == "fortran"
    let commentString = "!! "
  else
    let commentString = "## "
  endif
  execute ":" . a:firstline . "," . a:lastline . 's,^' . commentString . ',,'
endfunction
"==============================comments===================================

"===========================Chinese Punctuation: ctrl-s or :%call CheckChineseMark ==================
map <C-S> :call CheckChineseMark()<CR>
imap <C-S> <ESC>:call CheckChineseMark()<CR>
vmap <C-S> <ESC>:call CheckChineseMark()<CR>

function! CheckChineseMark()
  "check one by one
  if search('。')
    let s:line=search('。')
    execute s:line . "s/。/\./g"
  endif

  if search('，')
    let s:line=search('，')
    execute s:line . "s/，/,/g"
  endif

  if search('；')
    let s:line=search('；')
    execute s:line . "s/；/,/g"

  endif

  if search('？')
    let s:line=search('？')
    execute s:line . "s/？/?/g"
  endif

  if search('：')
    let s:line=search('：')
    execute s:line . "s/：/\:/g"
  endif

  if search('‘')
    let s:line=search('‘')
    execute s:line . "s/‘/\'/g"
  endif

  if search('’')
    let s:line=search('’')
    execute s:line . "s/’/\'/g"
  endif

  if search('”')
    let s:line=search('”')
    execute s:line . "s/”/\"/g"
  endif

  if search('“')
    let s:line=search('“')
    execute s:line . "s/“/\"/g"
  endif

  if search('《')
    let s:line=search('《')
    execute s:line . "s/《/\</g"
  endif

  if search('》')
    let s:linie=search('》')
    execute s:line . "s/》/\>/g"
  endif

  if search('——')
    let s:line=search('——')
    execute s:line . "s/——/-/g"
  endif

  if search('）')
    let s:line=search('）')
    execute s:line . "s/）/\)/g"
  endif

  if search('（')
    let s:line=search('（')
    execute s:line . "s/（/\(/g"
  endif

  if search('……')
    let s:line=search('……')
    execute s:line . "s/……/^/g"
  endif

  if search('￥')
    let s:line=search('￥')
    execute s:line . "s/￥/$/g"
  endif

  if search('！')
    let s:line=search('！')
    execute s:line . "s/！/!/g"
  endif

  if search('·')
    let s:line=search('·')
    execute s:line . "s/·/`/g"
  endif

  if search('、')
    let s:line=search('、')
    execute s:line . "s/、/,/g"
  endif

  if search('Θ')
    let s:line=search('Θ')
    execute s:line . "s/Θ/Theta/g"
  endif

  if search('ε')
    let s:line=search('ε')
    execute s:line . "s/ε/epsilon/g"
  endif

  if search('Ω')
    let s:line=search('Ω')
    execute s:line . "s/Ω/Omega/g"
  endif

  if search('∈')
    let s:line=search('∈')
    execute s:line . "s/∈/in/g"
  endif

  if search('≤')
    let s:line=search('≤')
    execute s:line . "s/≤/leq/g"
  endif

  if search('≥')
    let s:line=search('≥')
    execute s:line . "s/≥/geq/g"
  endif

  if search('≠')
    let s:line=search('≠')
    execute s:line . "s/≠/neq/g"
  endif

  if search('≈')
    let s:line=search('≈')
    execute s:line . "s/≈/approx/g"
  endif
endfunction
"===========================Chinese Punctuation: ctrl-s or :%call CheckChineseMark ==================

hi comment ctermfg=6  " comment color

